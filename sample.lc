#if false
#    print("hello world")
#elif null
#    print("hello hello")
#else
#    print("hello else")
#
#if false
#    print("hello hulla")
#elif true
#    print("hello elif")
#
#print("hello world")
#print(null, true, false)
#print(1, 2, 1 + 2, -(4*1))
#
#print({<<})
#
#return test

foo = (argv...):
    print(argv)
foo(1,2,3,4)

test = :exnihilo()
    x = 40
    y = 20
    blonk = ():
        x := 10
        print("blonk")

print(test, test.x)
test.blonk()
print(test, test.x)

class vec2 extends object
    +init = (self, x, y):
        self.x = x
        self.y = y
    +iter = (self):
        return iter([self.x, self.y])
    +repr = (self):
        return "vec2(" ++ repr(self.x) ++ ", " ++ repr(self.y) ++ ")"

a = vec2(0.5, 0.2)
b = vec2(0.8, 0.4)
c = vec2(0.3, 0.6)

%"+expr"[[vec2]] = (a):
    return a

%"-expr"[[vec2]] = (a):
    return vec2(-a.x, -a.y)

%"+"[[vec2, vec2]] = (a, b):
    return vec2(a.x+b.x, a.y+b.y)

%"-"[[vec2, vec2]] = (a, b):
    return vec2(a.x-b.x, a.y-b.y)

%"*"[[vec2, float]] = (a, b):
    return vec2(a.x*b, a.y*b)

%"*"[[float, vec2]] = (a, b):
    return vec2(a*b.x, a*b.y)

%"/"[[vec2, float]] = (a, b):
    return vec2(a.x/b, a.y/b)

%"/"[[float, vec2]] = (a, b):
    return vec2(a/b.x, a/b.y)

print(a)
print(b)
print(a + b)
print(1.1 + 1.2)

print("iterating vector")
for i in b
    print(i)

dot = multimethod(2)

print(dot)

k = 0
while k < 10
    print("K", k)
    k += 1

foo = exnihilo()
foo.a = 4
foo.a += 1
print("a:", foo.a)

foo = [0]
foo[0] += 1
print("[0]:", foo[0])


test = (first=4, foo...):
    print(first)
    print(foo)

test(1,2,3)
test(null, 5)
test()


while true
    print("breaking out of while")
    break

try
    try
        not_present_here()
    except Error as x
        print("got", interface(x), ":", x)
        print("and traceback:", x.traceback)
        print("we could raise it again..")
        raise x
except Error as x
    print("..or we could just exit")

# primitives available (int,float,string,list)
# locals/globals available
# some of the operators available
# list literal available
# if/elif/else available
# function call available
# function return available
# while available
# local assign available
# simple indexing available
# getattr available
# for loop available
# function available
# upscope lookup available
# upscope assign available
# setitem/setattr available
# dict literals available
# classes available
# function varargs available
# raise available
# while break/continue available

# scope block capture missing.
# generators missing, yield missing
# assert missing
